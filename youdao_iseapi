# -*- coding: utf-8 -*-
import os
import sys
import uuid
import requests
import wave
import base64
import hashlib
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
import oss2
from werkzeug.utils import secure_filename
from concurrent.futures import ThreadPoolExecutor

# 实现功能：上传音频文件，调用有道语音评测接口，将评测结果；将文件上传至阿里云OSS，并返回OSS URL

# 配置参数（建议使用环境变量或配置文件管理）

# 有道配置
YOUDAO_URL = 'https://openapi.youdao.com/iseapi'
APP_KEY = '您的应用ID'
APP_SECRET = '您的应用密钥'

# 阿里配置
OSS_ENDPOINT = '你的OSS终端地址'
OSS_ACCESS_KEY_ID = '你的阿里云Access Key ID'
OSS_ACCESS_KEY_SECRET = '你的阿里云Access Key Secret'
OSS_BUCKET_NAME = '你的OSS存储桶名称'
OSS_PREFIX = 'OSS文件夹前缀'
# 替换OSS域名
CUSTOM_DOMAIN = 'oss.abc.com'

# 确保此目录存在且有写权限
UPLOAD_FOLDER = '/path/to/save'

ALLOWED_EXTENSIONS = {'wav'}

# 初始化Flask应用
app = Flask(__name__)
CORS(app)  # 默认对所有路由启用跨域支持
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# 初始化阿里云OSS
auth = oss2.Auth(OSS_ACCESS_KEY_ID, OSS_ACCESS_KEY_SECRET)
bucket = oss2.Bucket(auth, OSS_ENDPOINT, OSS_BUCKET_NAME)

# 初始化线程池（根据服务器资源调整线程数）
executor = ThreadPoolExecutor(max_workers=10)


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def truncate(q):
    if q is None:
        return None
    size = len(q)
    return q if size <= 20 else q[0:10] + str(size) + q[size - 10:size]


def encrypt(signStr):
    hash_algorithm = hashlib.sha256()
    hash_algorithm.update(signStr.encode('utf-8'))
    return hash_algorithm.hexdigest()


def do_request(data):
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    try:
        response = requests.post(YOUDAO_URL, data=data, headers=headers, timeout=10)
        response.raise_for_status()
        return response.json()  # 假设返回JSON
    except requests.RequestException as e:
        return {'error': str(e)}


def evaluate_audio(file_path, lang_type, text):
    extension = file_path[file_path.rindex('.') + 1:]
    if extension.lower() != 'wav':
        return {'error': '不支持的音频类型', 'status': 'false'}

    try:
        with wave.open(file_path, 'rb') as wav_info:
            sample_rate = wav_info.getframerate()
            nchannels = wav_info.getnchannels()
    except wave.Error as e:
        return {'error': f'音频文件读取错误: {e}', 'status': 'false'}

    try:
        with open(file_path, 'rb') as file_wav:
            q = base64.b64encode(file_wav.read()).decode('utf-8')
    except IOError as e:
        return {'error': f'音频文件读取错误: {e}', 'status': 'false'}

    curtime = str(int(time.time()))
    salt = str(uuid.uuid1())
    signStr = APP_KEY + truncate(q) + salt + curtime + APP_SECRET
    sign = encrypt(signStr)

    data = {
        'appKey': APP_KEY,
        'q': q,
        'salt': salt,
        'sign': sign,
        'signType': "v2",
        'langType': lang_type,
        'curtime': curtime,
        'format': 'wav',
        'rate': sample_rate,
        'channel': nchannels,
        'type': 1,
        'text': text
    }

    response = do_request(data)
    return response


def upload_to_oss(oss_key, file_path):
    try:
        bucket.put_object_from_file(oss_key, file_path)
        oss_url = f"https://{OSS_BUCKET_NAME}.{OSS_ENDPOINT}/{oss_key}"

        # 如果有自定义域名，将域名替换
        if CUSTOM_DOMAIN:
            oss_url = oss_url.replace(f"{OSS_BUCKET_NAME}.{OSS_ENDPOINT}", CUSTOM_DOMAIN)

        return {'oss_url': oss_url}
    except oss2.exceptions.OssError as e:
        return {'error': str(e), 'status': 'false'}


def process_file(file_path, oss_key, lang_type, text):
    # 调用语音评测接口
    # lang_type = '合成文本的语言类型'  # 您需要根据实际情况获取
    # text = '音频对应的文字'  # 您需要根据实际情况获取
    evaluation_result = evaluate_audio(file_path, lang_type, text)

    if 'error' in evaluation_result:
        return {'evaluation_result': evaluation_result}

    # 上传至OSS
    oss_result = upload_to_oss(oss_key, file_path)
    if 'error' in oss_result:
        return {'evaluation_result': evaluation_result, 'oss_upload_error': oss_result['error']}

    # 删除本地文件
    try:
        os.remove(file_path)
    except OSError as e:
        return {'evaluation_result': evaluation_result, 'file_deletion_error': str(e)}

    return {
        'evaluation_result': evaluation_result,
        'oss_url': oss_result['oss_url']
    }


@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part', 'status': 'false'}), 400

    file = request.files['file']
    user_id = request.form.get('user_id')
    word = request.form.get('word')
    lang_type = request.form.get('lang_type')
    text = request.form.get('text')

    if not user_id or not word or not lang_type or not text:
        return jsonify({'error': 'Missing required form data', 'status': 'false'}), 400

    if file.filename == '':
        return jsonify({'error': 'No selected file', 'status': 'false'}), 400

    if file and allowed_file(file.filename):
        filename = secure_filename(f"{user_id}_{word}_{int(time.time())}.wav")
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)

        try:
            file.save(file_path)
        except Exception as e:
            return jsonify({'error': f'File saving failed: {e}', 'status': 'false'}), 500

        # 使用OSS_PREFIX作为前缀，并为文件指定路径
        oss_key = f"{OSS_PREFIX}/{word}/{user_id}/{filename}"

        # 提交后台任务
        future = executor.submit(process_file, file_path, oss_key, lang_type, text)
        try:
            result = future.result(timeout=60)  # 设置合理的超时时间
        except Exception as e:
            return jsonify({'error': f'Processing failed: {e}'}), 500

        if 'error' in result.get('evaluation_result', {}):
            return jsonify(result), 500

        return jsonify({
            'filename': filename,
            'evaluation_result': result.get('evaluation_result'),
            'oss_url': result.get('oss_url'),
            'status': 'true'
        }), 200
    else:
        return jsonify({'error': 'Unsupported file type', 'status': 'false'}), 400


if __name__ == '__main__':
    # 生产环境建议使用Gunicorn等WSGI服务器启动
    app.run(debug=False, host='0.0.0.0', port=5100)
